forensics  warmups 1
just unzip the file
{welcome_to_forensics}

forensics warmup 2
png file is actually a jpeg. open with other app
{extensions_are_a_lie}

general warmup 1
convert hex to scii
{A}

general warmup 2
convert base 27 to base 2
{11011}

general warmup 3
base 16 to base 10
{61}

resources 1
find flag in site text
picoCTF{xiexie_ni_lai_zheli}

reversing warmup 1
browse to specified path
run the program 
{welc0m3_t0_r3VeRs1nG} 

reversing warmup 2 
convert base64 string to ascii
{th4t_w4s_s1mpL3}

crypto warmup 1
vigenere table
{SECREETMESSAGE}

crypto warmup 2
ROT13 easy
{this_is_crypto!}

grep 1
grep picoCTF in file 
{grep_and_you_will_find_42783683}

netcat 1
nc pico..... porta
{NEtcat_iS_a_NEcESSiTy_8b6a1fbc}                                                                        
here's johnny
use john the ripper in file
passwd kissme
{J0hn_1$_R1pp3d_5f9a67aa}  

strings
use command strings WITH GREP to cat flag
{sTrIngS_sAVeS_Time_c09b1444}

pipe 
nc > file then | grep

inspect me 
page source 
flag split into three parts
picoCTF{ur_4_real_1nspect0r_g4dget_e96dd105*/}

grep 2

the flag -r searches recursively. So the command is grep -r 'picoCTF' ./

Aca-Shell-A

It's kind of a little game. Just have to do what the prompt says... ls, rm, whoami, cp. Watch for the relative path. That's all.
Flag is picoCTF{CrUsHeD_It_dddcec58}

Client side is Still Bad

We can find the flag in the Source Code, right on top of the code. It's out of order, so we can manually reorder it.
picoCTF{client_is_bad_9117e9}	


Desrouleaux

We get a json object and the shell asks questions about it. Ideally we should use python, but seeing that there aren't many lines, we can do it manually.
If we go python, we have to load the json in a pythonic object. This script will do that and answer the 1st question:

#!/usr/bin/python
import json
from pprint import pprint

with open('incidents.json', 'r') as f:
    incidents_dict = json.load(f)

for src_ip in incidents_dict['tickets']:
    print (src_ip['src_ip']))

and so on...


LOGON

So the site only checks for admin password. We can try an SQL Inj with admin " or ""=" ... that will work partially, as the flag still won't be revealed. Looking at the request headers, we see that there's a cookie that reads admin=False. We can try to change that value to True using Burp or even the Dev Tools on Firefox. Now we will get the flag. Flag: picoCTF{l0g1ns_ar3nt_r34l_92020990}

Reading between the eyes

Program gives us an image. Used an online steganography decoder. Flag is picoCTF{r34d1ng_b37w33n_7h3_by73s}

RECOVERING FROM THE SNAP

We use foremost (basic options, -o for output and -i for the animals.dd file) to recover some jpegs from the file. The last one contains the flag.


ADMIN PANEL
We get a pcap file with data from a site. We searched for the string password and the flag is revealed after some recurrences. Flag is picoCTF{n0ts3cur3_df598569}

ASSEMBLY 0

This is really basic one to understand the assembly language. From analyzing the code, we realize that the first parameter (ie 0xaa) is moved into the eax register, and the second parameter of the function (ie 0xf2) is stored in ebx. On the next line of code, the function pushes the ebx into eax. So the value returned will be eax, which is the flag.


BUFFER OVERFLOW 0

Always try to download the file locally and create a flag.txt file for the tests. It's much faster.
This is a very basic BO vulnerability. Examining the source code, we see that the sig handler will just cat the flag if the buffer is overflown. So that's easy. We just print a bunch (> 24) characters and the flag will be shown.


CAESAR CIPHER 1

This is a very easy cipher, and the challenge is actually not knowing what the shift is on the string. We can get an online converter and "brute force" all shifts until something maybe makes sense. So with the shift 23 we get picoCTF{justagoodoldcaesarcipherwoyolfpu}. Seems like it would be this one, and indeed when we pass it on to the server, it is correct.

ENVIRON

There is a flag hidden in an environment variable. The first command we should try is printenv, but that doesn't give us anything other than some nice taunting by the game. The second command, which would be (set -o posix ; set) | less , gives us nothing either. So for the third try we will use the command set, which prints a whole mess. If we do set | grep picoCTF the flag is printed. picoCTF{eNv1r0nM3nT_v4r14Bl3_fL4g_3758492}

HERTZ

We get a substitution cipher. The text is from the book War and Peace. We can use an online tool to decode it. Quipqiup.com was very effective. Flag is substitution_ciphers_are_solvable_ftcfvtwroh

HEX EDITOR

We are given a file to open in hexeditor. We just search for the string picoCTF, which gives us the flag picoCTF{and_thats_how_u_edit_hex_kittos_4bE5aCb8}


SSH-KEYZ

We have to create a key with ssh-keygen (if we don't already have one). Then we have to put it (paste the content) on the authorized_keys file on the webshell. Finally we can connect tothe site using ssh -i and the private key generated.


IRISH REPO

This is a basic SQL injection on the login screen. We can pass the parameter "admin ' or 1=1--" (without the double quotes) and the flag will be broadcast. Flag is: picoCTF{con4n_r3411y_1snt_1r1sh_d121ca0b}


Mr. ROBOTS

As the name hints, we have to take a look into the robots.txt file, to see which directories or files are disallowed. We get a forbidden html, which will give us the flag at picoCTF{th3_w0rld_1s_4_danger0us_pl4c3_3lli0t_c4075}.


NO LOGON

We don't have a login screen, and this time the site says we're not admin. In the GET flag request, there is no cookie for the admin, bu thte hint on the site says we should look out for the cookie. So we probably have to do it by trial and error. We have to create a cookie admin=True (case sensitive) in order for the program to cat the flag, which is: picoCTF{n0l0g0n_n0_pr0bl3m_ed714e0e}


SECRET AGENT

Now we have to change the user agent on the request to get the flag. The hint says it should be google, so we can switch to a googlebot user agent to get the flag, which is: picoCTF{s3cr3t_ag3nt_m4n_ed3fe08d}


TRULY AN ARTIST
